#include "UnitTest.h"

TEST(Matrix,Matrix4x4) {
    RMatrix4 m;
    m[0][0]=1;m[0][1]=2;m[0][2]=3;m[0][3]=4;
    m[1][0]=5.5;m[1][1]=6.5;m[1][2]=7.5;m[1][3]=8.5;
    m[2][0]=9;m[2][1]=10;m[2][2]=11;m[2][3]=12;
    m[3][0]=13.5;m[3][1]=14.5;m[3][2]=15.5;m[3][3]=16.5;

    EXPECT_EQ(m[0][0],1);
    EXPECT_EQ(m[0][3],4);
    EXPECT_EQ(m[1][0],5.5);
    EXPECT_EQ(m[1][2],7.5);
    EXPECT_EQ(m[2][2],11);
    EXPECT_EQ(m[3][0],13.5);
    EXPECT_EQ(m[3][2],15.5);
}

TEST(Matrix,Matrix2x2) {
    RMatrix2 m;
    m[0][0]=-3;m[0][1]=5;
    m[1][0]=1;m[1][1]=-2;
    EXPECT_EQ(m[0][0],-3);
    EXPECT_EQ(m[0][1],5);
    EXPECT_EQ(m[1][0],1);
    EXPECT_EQ(m[1][1],-2);
}

TEST(Matrix,Matrix3x3) {
    RMatrix3 m;
    m[0][0]=-3;m[0][1]=5;m[0][2]=0;
    m[0][0]=1;m[0][1]=-2;m[0][2]=-7;
    m[0][0]=0;m[0][1]=1;m[0][2]=1;
    EXPECT_EQ(m[0][0],-3);
    EXPECT_EQ(m[1][1],-2);
    EXPECT_EQ(m[2][2],1);
}

TEST(Matrix,equal) {
    RMatrix4 a;
    a[0][0]=1;a[0][1]=2;a[0][2]=3;a[0][3]=4;
    a[1][0]=5;a[1][1]=6;a[1][2]=7;a[1][3]=8;
    a[2][0]=9;a[2][1]=8;a[2][2]=7;a[2][3]=6;
    a[3][0]=5;a[3][1]=4;a[3][2]=3;a[3][3]=2;

    RMatrix4 b;
    b[0][0]=1;b[0][1]=2;b[0][2]=3;b[0][3]=4;
    b[1][0]=5;b[1][1]=6;b[1][2]=7;b[1][3]=8;
    b[2][0]=9;b[2][1]=8;b[2][2]=7;b[2][3]=6;
    b[3][0]=5;b[3][1]=4;b[3][2]=3;b[3][3]=2;

    EXPECT_EQ(a,b);

}
TEST(Matrix,notEqual) {
    RMatrix4 a;
    a[0][0]=1;a[0][1]=2;a[0][2]=3;a[0][3]=4;
    a[1][0]=5;a[1][1]=6;a[1][2]=7;a[1][3]=8;
    a[2][0]=9;a[2][1]=8;a[2][2]=7;a[2][3]=6;
    a[3][0]=5;a[3][1]=4;a[3][2]=3;a[3][3]=2;

    RMatrix4 b;
    b[0][0]=2;b[0][1]=3;b[0][2]=4;b[0][3]=1;
    b[1][0]=6;b[1][1]=7;b[1][2]=8;b[1][3]=5;
    b[2][0]=8;b[2][1]=7;b[2][2]=6;b[2][3]=9;
    b[3][0]=4;b[3][1]=3;b[3][2]=2;b[3][3]=5;

    EXPECT_NEQ(a,b);
}
TEST(Matric,MultiplyMatrix4x4) {
    RMatrix4 a;
    a[0][0]=1;a[0][1]=2;a[0][2]=3;a[0][3]=4;
    a[1][0]=5;a[1][1]=6;a[1][2]=7;a[1][3]=8;
    a[2][0]=9;a[2][1]=8;a[2][2]=7;a[2][3]=6;
    a[3][0]=5;a[3][1]=4;a[3][2]=3;a[3][3]=2;

    RMatrix4 b;
    b[0][0]=-2;b[0][1]=1;b[0][2]=2;b[0][3]=3;
    b[1][0]=3;b[1][1]=2;b[1][2]=1;b[1][3]=-1;
    b[2][0]=4;b[2][1]=3;b[2][2]=6;b[2][3]=5;
    b[3][0]=1;b[3][1]=2;b[3][2]=7;b[3][3]=8;

    RMatrix4 c;
    c[0][0]=20;c[0][1]=22;c[0][2]=50;c[0][3]=48;
    c[1][0]=44;c[1][1]=54;c[1][2]=114;c[1][3]=108;
    c[2][0]=40;c[2][1]=58;c[2][2]=110;c[2][3]=102;
    c[3][0]=16;c[3][1]=26;c[3][2]=46;c[3][3]=42;
    EXPECT_EQ(a*b,c);
}
TEST(Matrix,MultiplyTuple) {
    RMatrix4 a;
    a[0][0]=1;a[0][1]=2;a[0][2]=3;a[0][3]=4;
    a[1][0]=2;a[1][1]=4;a[1][2]=4;a[1][3]=2;
    a[2][0]=8;a[2][1]=6;a[2][2]=4;a[2][3]=1;
    a[3][0]=0;a[3][1]=0;a[3][2]=0;a[3][3]=1;

    RTuple b(1,2,3,1);
    EXPECT_EQ(A*b,RTuple(18,24,33,1));
}
